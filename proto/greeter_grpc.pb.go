// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessagesServiceClient is the client API for MessagesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessagesServiceClient interface {
	SendMessages(ctx context.Context, opts ...grpc.CallOption) (MessagesService_SendMessagesClient, error)
	ReceiveMessages(ctx context.Context, in *ClientInfos, opts ...grpc.CallOption) (MessagesService_ReceiveMessagesClient, error)
	RegisterClient(ctx context.Context, in *RegisterClientRequest, opts ...grpc.CallOption) (*ClientInfos, error)
	SubscribeToNewcomers(ctx context.Context, in *SubscribeToNewcomersRequest, opts ...grpc.CallOption) (MessagesService_SubscribeToNewcomersClient, error)
}

type messagesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessagesServiceClient(cc grpc.ClientConnInterface) MessagesServiceClient {
	return &messagesServiceClient{cc}
}

func (c *messagesServiceClient) SendMessages(ctx context.Context, opts ...grpc.CallOption) (MessagesService_SendMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessagesService_ServiceDesc.Streams[0], "/grpc_chat.MessagesService/SendMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagesServiceSendMessagesClient{stream}
	return x, nil
}

type MessagesService_SendMessagesClient interface {
	Send(*SendMessageRequest) error
	CloseAndRecv() (*Ok, error)
	grpc.ClientStream
}

type messagesServiceSendMessagesClient struct {
	grpc.ClientStream
}

func (x *messagesServiceSendMessagesClient) Send(m *SendMessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messagesServiceSendMessagesClient) CloseAndRecv() (*Ok, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ok)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagesServiceClient) ReceiveMessages(ctx context.Context, in *ClientInfos, opts ...grpc.CallOption) (MessagesService_ReceiveMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessagesService_ServiceDesc.Streams[1], "/grpc_chat.MessagesService/ReceiveMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagesServiceReceiveMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessagesService_ReceiveMessagesClient interface {
	Recv() (*ReceiveMessageResponse, error)
	grpc.ClientStream
}

type messagesServiceReceiveMessagesClient struct {
	grpc.ClientStream
}

func (x *messagesServiceReceiveMessagesClient) Recv() (*ReceiveMessageResponse, error) {
	m := new(ReceiveMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagesServiceClient) RegisterClient(ctx context.Context, in *RegisterClientRequest, opts ...grpc.CallOption) (*ClientInfos, error) {
	out := new(ClientInfos)
	err := c.cc.Invoke(ctx, "/grpc_chat.MessagesService/RegisterClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesServiceClient) SubscribeToNewcomers(ctx context.Context, in *SubscribeToNewcomersRequest, opts ...grpc.CallOption) (MessagesService_SubscribeToNewcomersClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessagesService_ServiceDesc.Streams[2], "/grpc_chat.MessagesService/SubscribeToNewcomers", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagesServiceSubscribeToNewcomersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessagesService_SubscribeToNewcomersClient interface {
	Recv() (*Newcomer, error)
	grpc.ClientStream
}

type messagesServiceSubscribeToNewcomersClient struct {
	grpc.ClientStream
}

func (x *messagesServiceSubscribeToNewcomersClient) Recv() (*Newcomer, error) {
	m := new(Newcomer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessagesServiceServer is the server API for MessagesService service.
// All implementations must embed UnimplementedMessagesServiceServer
// for forward compatibility
type MessagesServiceServer interface {
	SendMessages(MessagesService_SendMessagesServer) error
	ReceiveMessages(*ClientInfos, MessagesService_ReceiveMessagesServer) error
	RegisterClient(context.Context, *RegisterClientRequest) (*ClientInfos, error)
	SubscribeToNewcomers(*SubscribeToNewcomersRequest, MessagesService_SubscribeToNewcomersServer) error
	mustEmbedUnimplementedMessagesServiceServer()
}

// UnimplementedMessagesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessagesServiceServer struct {
}

func (UnimplementedMessagesServiceServer) SendMessages(MessagesService_SendMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMessages not implemented")
}
func (UnimplementedMessagesServiceServer) ReceiveMessages(*ClientInfos, MessagesService_ReceiveMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveMessages not implemented")
}
func (UnimplementedMessagesServiceServer) RegisterClient(context.Context, *RegisterClientRequest) (*ClientInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterClient not implemented")
}
func (UnimplementedMessagesServiceServer) SubscribeToNewcomers(*SubscribeToNewcomersRequest, MessagesService_SubscribeToNewcomersServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToNewcomers not implemented")
}
func (UnimplementedMessagesServiceServer) mustEmbedUnimplementedMessagesServiceServer() {}

// UnsafeMessagesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessagesServiceServer will
// result in compilation errors.
type UnsafeMessagesServiceServer interface {
	mustEmbedUnimplementedMessagesServiceServer()
}

func RegisterMessagesServiceServer(s grpc.ServiceRegistrar, srv MessagesServiceServer) {
	s.RegisterService(&MessagesService_ServiceDesc, srv)
}

func _MessagesService_SendMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessagesServiceServer).SendMessages(&messagesServiceSendMessagesServer{stream})
}

type MessagesService_SendMessagesServer interface {
	SendAndClose(*Ok) error
	Recv() (*SendMessageRequest, error)
	grpc.ServerStream
}

type messagesServiceSendMessagesServer struct {
	grpc.ServerStream
}

func (x *messagesServiceSendMessagesServer) SendAndClose(m *Ok) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messagesServiceSendMessagesServer) Recv() (*SendMessageRequest, error) {
	m := new(SendMessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessagesService_ReceiveMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientInfos)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagesServiceServer).ReceiveMessages(m, &messagesServiceReceiveMessagesServer{stream})
}

type MessagesService_ReceiveMessagesServer interface {
	Send(*ReceiveMessageResponse) error
	grpc.ServerStream
}

type messagesServiceReceiveMessagesServer struct {
	grpc.ServerStream
}

func (x *messagesServiceReceiveMessagesServer) Send(m *ReceiveMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MessagesService_RegisterClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagesServiceServer).RegisterClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_chat.MessagesService/RegisterClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagesServiceServer).RegisterClient(ctx, req.(*RegisterClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagesService_SubscribeToNewcomers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToNewcomersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagesServiceServer).SubscribeToNewcomers(m, &messagesServiceSubscribeToNewcomersServer{stream})
}

type MessagesService_SubscribeToNewcomersServer interface {
	Send(*Newcomer) error
	grpc.ServerStream
}

type messagesServiceSubscribeToNewcomersServer struct {
	grpc.ServerStream
}

func (x *messagesServiceSubscribeToNewcomersServer) Send(m *Newcomer) error {
	return x.ServerStream.SendMsg(m)
}

// MessagesService_ServiceDesc is the grpc.ServiceDesc for MessagesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessagesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_chat.MessagesService",
	HandlerType: (*MessagesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterClient",
			Handler:    _MessagesService_RegisterClient_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessages",
			Handler:       _MessagesService_SendMessages_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceiveMessages",
			Handler:       _MessagesService_ReceiveMessages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToNewcomers",
			Handler:       _MessagesService_SubscribeToNewcomers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/greeter.proto",
}
